syntax = "proto3";

package authorizer.accesswatcher.v1alpha1;

import "google/api/annotations.proto";

option go_package = "github.com/authorizer-tech/access-watcher/genprotos/authorizer/accesswatcher/v1alpha1;watcher";

// A service defining APIs to watch for changes to namespaces.
service WatchService {

  // Watches for changes to relation tuples in one or more namespaces.
  rpc Watch(WatchRequest) returns (stream WatchResponse) {
    option (google.api.http) = {
      get: "/access-watcher/v1alpha1/watch"
    };
  }
}

// The request for a WatchService.Watch rpc.
message WatchRequest {

    // The namespaces to start watching for changes to.
    repeated string namespaces = 1;

    // A snapshot token encoding a timestamp where changes should start watching from.
    string snaptoken = 2;
}

// The response for a WatchService.Watch rpc.
message WatchResponse {

    // The relation tuple delta that occurred.
    RelationTupleDelta relation_tuple_delta = 1;

    // A snapshot token encoding the timestamp of the relation tuple change.
    string snaptoken = 2;
}

// Write-delta for a WriteRelationTuplesTxnRequest.
message RelationTupleDelta {

  // An enumeration defining the actions or mutations that can be done on a RelationTuple.
  enum Action {
    // An unspecified action.
    //
    // The `WriteRelationTuplesTxn` rpc ignores RelationTupleDeltas with
    // an unspecified action.
    ACTION_UNSPECIFIED = 0;

    // Upserts a new RelationTuple.
    //
    // If the RelationTuple already exists no modification is done.
    ACTION_INSERT = 1;

    // Deletes the RelationTuple.
    //
    // If the RelationTuple does not exist it's a no-op.
    ACTION_DELETE = 4;
  }

  // The action to do on the RelationTuple.
  Action action = 1;

  // The target RelationTuple.
  RelationTuple relation_tuple = 2;
}

// RelationTuple relates an object with a subject.
//
// While a tuple reflects a relationship between object
// and subject, they do not completely define the effective ACLs.
message RelationTuple {

  // The namespace this relation tuple lives in.
  string namespace = 1;

  // The object identifier related by this tuple.
  //
  // Objects live within the namespace of the tuple.
  string object = 2;

  // The relation between the Object and the Subject.
  string relation = 3;

  // The subject related by this tuple.
  Subject subject = 4;
}

// Subject is either a concrete subject id string or
// a SubjectSet expanding to more Subjects.
message Subject {

  // The reference of this abstract subject.
  oneof ref {

    // A concrete subject id string for the subject.
    string id = 1;

    // A SubjectSet that expands to more Subjects.
    SubjectSet set = 2;
  }
}

// A SubjectSet refers to all subjects which have the same
// relation to an object.
message SubjectSet {

  // The namespace of the object and relation referenced in this SubjectSet.
  string namespace = 1;

  // The object selected by the subjects.
  string object = 2;

  // The relation between the object and the subject(s).
  string relation = 3;
}